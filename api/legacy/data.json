{
    "project": {
        "name": "Parse JavaScript SDK"
    },
    "files": {
        "../v8server/cloud.js": {
            "name": "../v8server/cloud.js",
            "modules": {},
            "classes": {
                "Parse.Cloud.FunctionRequest": 1,
                "Parse.Cloud.FunctionResponse": 1,
                "Parse.Cloud.BeforeSaveRequest": 1,
                "Parse.Cloud.BeforeSaveResponse": 1,
                "Parse.Cloud.AfterSaveRequest": 1,
                "Parse.Cloud.HTTPOptions": 1,
                "Parse.Cloud.HTTPResponse": 1,
                "Parse.Cloud.Cookie": 1,
                "Parse.Cloud.CookieOptions": 1,
                "Parse.Cloud.BeforeDeleteRequest": 1,
                "Parse.Cloud.BeforeDeleteResponse": 1,
                "Parse.Cloud.AfterDeleteRequest": 1,
                "Parse.Cloud.JobRequest": 1,
                "Parse.Cloud.JobStatus": 1
            },
            "fors": {
                "Parse.Cloud": 1
            },
            "namespaces": {}
        },
        "sdk/src/Analytics.js": {
            "name": "sdk/src/Analytics.js",
            "modules": {},
            "classes": {
                "Parse.Analytics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/Cloud.js": {
            "name": "sdk/src/Cloud.js",
            "modules": {},
            "classes": {
                "Parse.Cloud": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/CoreManager.js": {
            "name": "sdk/src/CoreManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/FacebookUtils.js": {
            "name": "sdk/src/FacebookUtils.js",
            "modules": {},
            "classes": {
                "Parse.FacebookUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/InstallationController.js": {
            "name": "sdk/src/InstallationController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ObjectState.js": {
            "name": "sdk/src/ObjectState.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/Parse.js": {
            "name": "sdk/src/Parse.js",
            "modules": {},
            "classes": {
                "Parse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseACL.js": {
            "name": "sdk/src/ParseACL.js",
            "modules": {},
            "classes": {
                "Parse.ACL": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseConfig.js": {
            "name": "sdk/src/ParseConfig.js",
            "modules": {},
            "classes": {
                "Parse.Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseError.js": {
            "name": "sdk/src/ParseError.js",
            "modules": {},
            "classes": {
                "Parse.Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseFile.js": {
            "name": "sdk/src/ParseFile.js",
            "modules": {},
            "classes": {
                "Parse.File": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseGeoPoint.js": {
            "name": "sdk/src/ParseGeoPoint.js",
            "modules": {},
            "classes": {
                "Parse.GeoPoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseInstallation.js": {
            "name": "sdk/src/ParseInstallation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseObject.js": {
            "name": "sdk/src/ParseObject.js",
            "modules": {},
            "classes": {
                "Parse.Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseOp.js": {
            "name": "sdk/src/ParseOp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParsePromise.js": {
            "name": "sdk/src/ParsePromise.js",
            "modules": {},
            "classes": {
                "Parse.Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseQuery.js": {
            "name": "sdk/src/ParseQuery.js",
            "modules": {},
            "classes": {
                "Parse.Query": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseRelation.js": {
            "name": "sdk/src/ParseRelation.js",
            "modules": {},
            "classes": {
                "Parse.Relation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseRole.js": {
            "name": "sdk/src/ParseRole.js",
            "modules": {},
            "classes": {
                "Parse.Role": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseSession.js": {
            "name": "sdk/src/ParseSession.js",
            "modules": {},
            "classes": {
                "Parse.Session": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/ParseUser.js": {
            "name": "sdk/src/ParseUser.js",
            "modules": {},
            "classes": {
                "Parse.User": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/Push.js": {
            "name": "sdk/src/Push.js",
            "modules": {},
            "classes": {
                "Parse.Push": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/RESTController.js": {
            "name": "sdk/src/RESTController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/Storage.js": {
            "name": "sdk/src/Storage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/StorageController.browser.js": {
            "name": "sdk/src/StorageController.browser.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/StorageController.default.js": {
            "name": "sdk/src/StorageController.default.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/StorageController.react-native.js": {
            "name": "sdk/src/StorageController.react-native.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/TaskQueue.js": {
            "name": "sdk/src/TaskQueue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/arrayContainsObject.js": {
            "name": "sdk/src/arrayContainsObject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/canBeSerialized.js": {
            "name": "sdk/src/canBeSerialized.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/decode.js": {
            "name": "sdk/src/decode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/encode.js": {
            "name": "sdk/src/encode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/equals.js": {
            "name": "sdk/src/equals.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/escape.js": {
            "name": "sdk/src/escape.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/isRevocableSession.js": {
            "name": "sdk/src/isRevocableSession.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/parseDate.js": {
            "name": "sdk/src/parseDate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/unique.js": {
            "name": "sdk/src/unique.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sdk/src/unsavedChildren.js": {
            "name": "sdk/src/unsavedChildren.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Parse.Cloud": {
            "name": "Parse.Cloud",
            "shortname": "Parse.Cloud",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/Cloud.js",
            "line": 18,
            "description": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>",
            "static": 1
        },
        "Parse.Cloud.FunctionRequest": {
            "name": "Parse.Cloud.FunctionRequest",
            "shortname": "Parse.Cloud.FunctionRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 220,
            "is_constructor": 1
        },
        "Parse.Cloud.FunctionResponse": {
            "name": "Parse.Cloud.FunctionResponse",
            "shortname": "Parse.Cloud.FunctionResponse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 247,
            "is_constructor": 1
        },
        "Parse.Cloud.BeforeSaveRequest": {
            "name": "Parse.Cloud.BeforeSaveRequest",
            "shortname": "Parse.Cloud.BeforeSaveRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 267,
            "is_constructor": 1
        },
        "Parse.Cloud.BeforeSaveResponse": {
            "name": "Parse.Cloud.BeforeSaveResponse",
            "shortname": "Parse.Cloud.BeforeSaveResponse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 294,
            "is_constructor": 1,
            "itemtype": "property",
            "type": "Function"
        },
        "Parse.Cloud.AfterSaveRequest": {
            "name": "Parse.Cloud.AfterSaveRequest",
            "shortname": "Parse.Cloud.AfterSaveRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 320,
            "is_constructor": 1
        },
        "Parse.Cloud.HTTPOptions": {
            "name": "Parse.Cloud.HTTPOptions",
            "shortname": "Parse.Cloud.HTTPOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 579,
            "is_constructor": 1
        },
        "Parse.Cloud.HTTPResponse": {
            "name": "Parse.Cloud.HTTPResponse",
            "shortname": "Parse.Cloud.HTTPResponse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 650,
            "is_constructor": 1
        },
        "Parse.Cloud.Cookie": {
            "name": "Parse.Cloud.Cookie",
            "shortname": "Parse.Cloud.Cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 694,
            "is_constructor": 1,
            "itemtype": "property",
            "type": "String"
        },
        "Parse.Cloud.CookieOptions": {
            "name": "Parse.Cloud.CookieOptions",
            "shortname": "Parse.Cloud.CookieOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 723,
            "is_constructor": 1
        },
        "Parse.Cloud.BeforeDeleteRequest": {
            "name": "Parse.Cloud.BeforeDeleteRequest",
            "shortname": "Parse.Cloud.BeforeDeleteRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 981,
            "is_constructor": 1
        },
        "Parse.Cloud.BeforeDeleteResponse": {
            "name": "Parse.Cloud.BeforeDeleteResponse",
            "shortname": "Parse.Cloud.BeforeDeleteResponse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 1009,
            "is_constructor": 1
        },
        "Parse.Cloud.AfterDeleteRequest": {
            "name": "Parse.Cloud.AfterDeleteRequest",
            "shortname": "Parse.Cloud.AfterDeleteRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 1028,
            "is_constructor": 1
        },
        "Parse.Cloud.JobRequest": {
            "name": "Parse.Cloud.JobRequest",
            "shortname": "Parse.Cloud.JobRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 1164,
            "is_constructor": 1
        },
        "Parse.Cloud.JobStatus": {
            "name": "Parse.Cloud.JobStatus",
            "shortname": "Parse.Cloud.JobStatus",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../v8server/cloud.js",
            "line": 1176,
            "is_constructor": 1
        },
        "Parse.Analytics": {
            "name": "Parse.Analytics",
            "shortname": "Parse.Analytics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/Analytics.js",
            "line": 16,
            "description": "Parse.Analytics provides an interface to Parse's logging and analytics\nbackend.",
            "static": 1
        },
        "Parse.FacebookUtils": {
            "name": "Parse.FacebookUtils",
            "shortname": "Parse.FacebookUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/FacebookUtils.js",
            "line": 92,
            "description": "Provides a set of utilities for using Parse with Facebook.",
            "static": 1
        },
        "Parse": {
            "name": "Parse",
            "shortname": "Parse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/Parse.js",
            "line": 17,
            "description": "Contains all Parse API classes and functions.",
            "static": 1
        },
        "Parse.ACL": {
            "name": "Parse.ACL",
            "shortname": "Parse.ACL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseACL.js",
            "line": 17,
            "description": "Creates a new ACL.\nIf no argument is given, the ACL has no permissions for anyone.\nIf the argument is a Parse.User, the ACL will have read and write\n  permission for only that user.\nIf the argument is any other JSON object, that object will be interpretted\n  as a serialized ACL created with toJSON().",
            "is_constructor": 1
        },
        "Parse.Config": {
            "name": "Parse.Config",
            "shortname": "Parse.Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseConfig.js",
            "line": 20,
            "description": "Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "is_constructor": 1
        },
        "Parse.Error": {
            "name": "Parse.Error",
            "shortname": "Parse.Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseError.js",
            "line": 10,
            "description": "Constructs a new Parse.Error object with the given code and message.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": "An error code constant from <code>Parse.Error</code>.",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "A detailed description of the error.",
                    "type": "String"
                }
            ]
        },
        "Parse.File": {
            "name": "Parse.File",
            "shortname": "Parse.File",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseFile.js",
            "line": 48,
            "description": "A Parse.File is a local representation of a file that is saved to the Parse\ncloud.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The file's name. This will be prefixed by a unique\n    value once the file has finished saving. The file name must begin with\n    an alphanumeric character, and consist of alphanumeric characters,\n    periods, spaces, underscores, or dashes.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data for the file, as either:\n    1. an Array of byte value Numbers, or\n    2. an Object like { base64: \"...\" } with a base64-encoded String.\n    3. a File object selected with a file upload control. (3) only works\n       in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n       For example:<pre>\nvar fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\nif (fileUploadControl.files.length > 0) {\n  var file = fileUploadControl.files[0];\n  var name = \"photo.jpg\";\n  var parseFile = new Parse.File(name, file);\n  parseFile.save().then(function() {\n    // The file has been saved to Parse.\n  }, function(error) {\n    // The file either could not be read, or could not be saved to Parse.\n  });\n}</pre>",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "Optional Content-Type header to use for the file. If\n    this is omitted, the content type will be inferred from the name's\n    extension.",
                    "type": "String"
                }
            ]
        },
        "Parse.GeoPoint": {
            "name": "Parse.GeoPoint",
            "shortname": "Parse.GeoPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 14,
            "description": "Creates a new GeoPoint with any of the following forms:<br>\n  <pre>\n  new GeoPoint(otherGeoPoint)\n  new GeoPoint(30, 30)\n  new GeoPoint([30, 30])\n  new GeoPoint({latitude: 30, longitude: 30})\n  new GeoPoint()  // defaults to (0, 0)\n  </pre>",
            "is_constructor": 1
        },
        "Parse.Object": {
            "name": "Parse.Object",
            "shortname": "Parse.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseObject.js",
            "line": 77,
            "description": "Creates a new model with defined attributes.\n\n<p>You won't normally call this method directly.  It is recommended that\nyou use a subclass of <code>Parse.Object</code> instead, created by calling\n<code>extend</code>.</p>\n\n<p>However, if you don't want to use a subclass, or aren't sure which\nsubclass is appropriate, you can use this form:<pre>\n    var object = new Parse.Object(\"ClassName\");\n</pre>\nThat is basically equivalent to:<pre>\n    var MyClass = Parse.Object.extend(\"ClassName\");\n    var object = new MyClass();\n</pre></p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "className",
                    "description": "The class name for the object",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "The initial set of data to store in the object.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "The options for this object instance.",
                    "type": "Object"
                }
            ]
        },
        "Parse.Promise": {
            "name": "Parse.Promise",
            "shortname": "Parse.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParsePromise.js",
            "line": 12,
            "description": "A Promise is returned by async methods as a hook to provide callbacks to be\ncalled when the async task is fulfilled.\n\n<p>Typical usage would be like:<pre>\n   query.find().then(function(results) {\n     results[0].set(\"foo\", \"bar\");\n     return results[0].saveAsync();\n   }).then(function(result) {\n     console.log(\"Updated \" + result.id);\n   });\n</pre></p>",
            "is_constructor": 1
        },
        "Parse.Query": {
            "name": "Parse.Query",
            "shortname": "Parse.Query",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseQuery.js",
            "line": 45,
            "description": "Creates a new parse Parse.Query for the given Parse.Object subclass.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objectClass",
                    "description": "An instance of a subclass of Parse.Object, or a Parse className string.\n\n<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>"
                }
            ]
        },
        "Parse.Relation": {
            "name": "Parse.Relation",
            "shortname": "Parse.Relation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseRelation.js",
            "line": 16,
            "description": "Creates a new Relation for the given parent object and key. This\nconstructor should rarely be used directly, but rather created by\nParse.Object.relation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "The parent of this relation.",
                    "type": "Parse.Object"
                },
                {
                    "name": "key",
                    "description": "The key for this relation on the parent.\n\n<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
                    "type": "String"
                }
            ]
        },
        "Parse.Role": {
            "name": "Parse.Role",
            "shortname": "Parse.Role",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseRole.js",
            "line": 19,
            "description": "Represents a Role on the Parse server. Roles represent groupings of\nUsers for the purposes of granting permissions (e.g. specifying an ACL\nfor an Object). Roles are specified by their sets of child users and\nchild roles, all of which are granted any permissions that the parent\nrole has.\n\n<p>Roles must have a name (which cannot be changed after creation of the\nrole), and must specify an ACL.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Role to create.",
                    "type": "String"
                },
                {
                    "name": "acl",
                    "description": "The ACL for this role. Roles must have an ACL.\nA Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
                    "type": "Parse.ACL"
                }
            ]
        },
        "Parse.Session": {
            "name": "Parse.Session",
            "shortname": "Parse.Session",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseSession.js",
            "line": 21,
            "is_constructor": 1
        },
        "Parse.User": {
            "name": "Parse.User",
            "shortname": "Parse.User",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/ParseUser.js",
            "line": 33,
            "is_constructor": 1
        },
        "Parse.Push": {
            "name": "Parse.Push",
            "shortname": "Parse.Push",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "sdk/src/Push.js",
            "line": 26,
            "description": "Contains functions to deal with Push in Parse.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../v8server/cloud.js",
            "line": 70,
            "description": "Switches the Parse SDK to using the Master key.  The Master key grants\npriveleged access to the data in Parse and can be used to bypass ACLs and\nother restrictions that are applied to the client SDKs.\n<p><strong><em>Available in Cloud Code and Node.js only.</em></strong></p>",
            "itemtype": "method",
            "name": "useMasterKey",
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 86,
            "description": "Individual Cloud Code requests currently artificially inflate the active\ninstallations of any app. Here, we force the installation ID to return\nsomething deterministic + identifiable to avoid inflation while still being\nuseful for debugging.",
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 226,
            "description": "The params passed to the cloud function",
            "itemtype": "property",
            "name": "params",
            "type": "Object",
            "class": "Parse.Cloud.FunctionRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 231,
            "description": "If true, means the master key was used",
            "itemtype": "property",
            "name": "master",
            "type": "Boolean",
            "class": "Parse.Cloud.FunctionRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 236,
            "description": "If set, the user that made the request.",
            "itemtype": "property",
            "name": "user",
            "type": "Parse.User",
            "class": "Parse.Cloud.FunctionRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 241,
            "description": "If set, the installationId triggering the request.",
            "itemtype": "property",
            "name": "installationId",
            "type": "String",
            "class": "Parse.Cloud.FunctionRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 254,
            "description": "If success is called, will return a successful response with the optional\nargument to the caller.",
            "itemtype": "property",
            "name": "success",
            "type": "Function",
            "class": "Parse.Cloud.FunctionResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 260,
            "description": "If error is called, will return an error response with an optionally passed\nmessage.",
            "itemtype": "property",
            "name": "error",
            "type": "Function",
            "class": "Parse.Cloud.FunctionResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 273,
            "description": "The object that is being saved.",
            "itemtype": "property",
            "name": "object",
            "type": "Object",
            "class": "Parse.Cloud.BeforeSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 278,
            "description": "If true, means the master key was used",
            "itemtype": "property",
            "name": "master",
            "type": "Boolean",
            "class": "Parse.Cloud.BeforeSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 283,
            "description": "If set, the user that made the request.",
            "itemtype": "property",
            "name": "user",
            "type": "Parse.User",
            "class": "Parse.Cloud.BeforeSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 288,
            "description": "If set, the installationId triggering the request.",
            "itemtype": "property",
            "name": "installationId",
            "type": "String",
            "class": "Parse.Cloud.BeforeSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 306,
            "description": "If called, will allow the save to happen.  If\na Parse.Object is passed in, then the passed in object will be saved\ninstead.",
            "itemtype": "property",
            "name": "success",
            "type": "Function",
            "class": "Parse.Cloud.BeforeSaveResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 313,
            "description": "If called, will reject the save.  An optional\nerror message may be passed in.",
            "itemtype": "property",
            "name": "error",
            "type": "Function",
            "class": "Parse.Cloud.BeforeSaveResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 326,
            "description": "The object that was saved.",
            "itemtype": "property",
            "name": "object",
            "type": "Object",
            "class": "Parse.Cloud.AfterSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 331,
            "description": "If true, means the master key was used",
            "itemtype": "property",
            "name": "master",
            "type": "Boolean",
            "class": "Parse.Cloud.AfterSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 336,
            "description": "If set, the user that made the request.",
            "itemtype": "property",
            "name": "user",
            "type": "Parse.User",
            "class": "Parse.Cloud.AfterSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 341,
            "description": "If set, the installationId triggering the request.",
            "itemtype": "property",
            "name": "installationId",
            "type": "String",
            "class": "Parse.Cloud.AfterSaveRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 348,
            "description": "Defines a Cloud Function.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Cloud Function",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "The Cloud Function to register.  This function\nshould take two parameters a Parse.Cloud.FunctionRequest and a\nParse.Cloud.FunctionResponse",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 369,
            "description": "Registers a before save function.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\nIf you want use <code>beforeSave</code> for a predefined class in the Parse\nJavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself\nand not the String for <code>arg1</code>.\n\n<pre>\n  Parse.Cloud.beforeSave('MyCustomClass', function(request, response) {\n    // code here\n  })\n\n  Parse.Cloud.beforeSave(Parse.User, function(request, response) {\n    // code here\n  })\n</pre>",
            "itemtype": "method",
            "name": "beforeSave",
            "params": [
                {
                    "name": "arg1",
                    "description": "The Parse.Object subclass to register the before save\nfunction for.  This can instead be a String that is the className of the\nsubclass.",
                    "type": "Class"
                },
                {
                    "name": "func",
                    "description": "The function to run before a save.  This function\nshould take two parameters a  {@link Parse.Cloud.BeforeSaveRequest} and a\n{@link Parse.Cloud.BeforeSaveResponse}",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 407,
            "description": "Registers an after save function.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\nIf you want to use <code>afterSave</code> for a predefined class in the\nParse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class\nitself and not the String for <code>arg1</code>.\n\n<pre>\n  Parse.Cloud.afterSave('MyCustomClass', function(request) {\n    // code here\n  })\n\n  Parse.Cloud.afterSave(Parse.User, function(request) {\n    // code here\n  })\n</pre>",
            "itemtype": "method",
            "name": "afterSave",
            "params": [
                {
                    "name": "arg1",
                    "description": "The Parse.Object subclass to register the before save\nfunction for.  This can instead be a String that is the className of the\nsubclass.",
                    "type": "Class"
                },
                {
                    "name": "func",
                    "description": "The function to run before a save.  This function\nshould take just one parameter,   {@link Parse.Cloud.AfterSaveRequest}.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 601,
            "description": "The url to send the request to.",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 606,
            "description": "The method of the request. GET, POST, PUT, DELETE, HEAD, and OPTIONS are supported. Will default to GET if not specified.",
            "itemtype": "property",
            "name": "method",
            "type": "String",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 611,
            "description": "The headers for the request.",
            "itemtype": "property",
            "name": "headers",
            "type": "Object",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 616,
            "description": "The body of the request. If it is a JSON\nobject, then the Content-Type set in the headers must be\napplication/x-www-form-urlencoded or application/json. You can also set\nthis to a {@link Buffer} object to send raw bytes.  If you use a Buffer,\nyou should also set the Content-Type header explicitly to describe what\nthese bytes represent.",
            "itemtype": "property",
            "name": "body",
            "type": "String|Object",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 626,
            "description": "The query portion of the url. You can pass a JSON object of key value pairs like <code>params: {q : 'Sean Plott'}</code> or a raw string like <code>params:q=Sean Plott</code>.",
            "itemtype": "property",
            "name": "params",
            "type": "String|Object",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 631,
            "description": "Whether to follow redirects caused by HTTP 3xx responses. Defaults to false.",
            "itemtype": "property",
            "name": "followRedirects",
            "type": "Boolean",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 636,
            "description": "The function that is called when the request\nsuccessfully completes. It will be passed a\nParse.Cloud.HTTPResponse object.",
            "itemtype": "property",
            "name": "success",
            "type": "Function",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 643,
            "description": "The function that is called when the request\nfails. It will be passed a Parse.Cloud.HTTPResponse object.",
            "itemtype": "property",
            "name": "error",
            "type": "Function",
            "class": "Parse.Cloud.HTTPOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 656,
            "description": "The status code.",
            "itemtype": "property",
            "name": "status",
            "type": "Number",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 661,
            "description": "The parsed response body as a JavaScript object.\nThis is only available when the response Content-Type is\napplication/x-www-form-urlencoded or application/json.",
            "itemtype": "property",
            "name": "data",
            "type": "Object",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 668,
            "description": "The raw text representation of the response body.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 673,
            "description": "The raw byte representation of the response body. Use this to receive binary data.  See Buffer for more details.",
            "itemtype": "property",
            "name": "buffer",
            "type": "Buffer",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 678,
            "description": "The headers sent by the server.  The keys in\nthis object are the names of the headers.  We do not support multiple\nresponse headers with the same name.  In the common case of Set-Cookie\nheaders, please use the <code>cookies</code> field instead.",
            "itemtype": "property",
            "name": "headers",
            "type": "Object",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 686,
            "description": "The cookies sent by the server.  The keys in\nthis object are the names of the cookies.\nThe values are Parse.Cloud.Cookie objects.",
            "itemtype": "property",
            "name": "cookies",
            "type": "Object",
            "class": "Parse.Cloud.HTTPResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 707,
            "description": "The name of the cookie.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Parse.Cloud.Cookie"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 712,
            "description": "The value of the cookie.",
            "itemtype": "property",
            "name": "value",
            "type": "STring",
            "class": "Parse.Cloud.Cookie"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 717,
            "description": "The options for the cookie.",
            "itemtype": "property",
            "name": "options",
            "type": "Parse.Cloud.CookieOptions",
            "class": "Parse.Cloud.Cookie"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 729,
            "description": "The expiration time of the cookie.",
            "itemtype": "property",
            "name": "expires",
            "type": "Date",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 734,
            "description": "The time in milliseconds before the\ncookie expires.",
            "itemtype": "property",
            "name": "maxAge",
            "type": "Integer",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 740,
            "description": "The domain for the cookie.",
            "itemtype": "property",
            "name": "domain",
            "type": "String",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 745,
            "description": "The path for the cookie.",
            "itemtype": "property",
            "name": "path",
            "type": "String",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 750,
            "description": "Whether the cookie should be only sent over a secure connection.",
            "itemtype": "property",
            "name": "secure",
            "type": "Boolean",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 755,
            "description": "Whether the cookie should only be sent over an HTTP connection.",
            "itemtype": "property",
            "name": "httpOnly",
            "type": "Boolean",
            "class": "Parse.Cloud.CookieOptions"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 761,
            "description": "Makes an HTTP Request.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\n\nThere is a limit of 8 concurrent httpRequests per Cloud Code request, and additional requests will be queued up. If your url specifies a port number, it must be 80, 443, or any number from 1025 through 65535.\n\nBy default, <code>Parse.Cloud.httpRequest</code> does not follow redirects caused by HTTP 3xx response codes. You can use the followRedirects option in the {@link Parse.Cloud.HTTPOptions} object to change this behavior.\n\nSample request:\n\n<pre>\n  Parse.Cloud.httpRequest({\n    url: 'http://www.parse.com/'\n  }).then(function(httpResponse) {\n    // success\n    console.log(httpResponse.text);\n  },function(httpResponse) {\n    // error\n    console.error('Request failed with response code ' + httpResponse.status);\n  });\n</pre>",
            "itemtype": "method",
            "name": "httpRequest",
            "params": [
                {
                    "name": "options",
                    "description": "The Parse.Cloud.HTTPOptions object that makes the request.",
                    "type": "HTTPOptions"
                }
            ],
            "return": {
                "description": "A promise that will be resolved with a\nParse.Cloud.HTTPResponse object when the request completes.",
                "type": "Parse.Promise"
            },
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 988,
            "description": "The object that is being deleted.",
            "itemtype": "property",
            "name": "object",
            "type": "Object",
            "class": "Parse.Cloud.BeforeDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 993,
            "description": "If true, means the master key was used",
            "itemtype": "property",
            "name": "master",
            "type": "Boolean",
            "class": "Parse.Cloud.BeforeDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 998,
            "description": "If set, the user that made the request.",
            "itemtype": "property",
            "name": "user",
            "type": "Parse.User",
            "class": "Parse.Cloud.BeforeDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1003,
            "description": "If set, the installationId triggering the request.",
            "itemtype": "property",
            "name": "installationId",
            "type": "String",
            "class": "Parse.Cloud.BeforeDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1017,
            "description": "If called, will allow the delete to happen.",
            "itemtype": "property",
            "name": "success",
            "type": "Function",
            "class": "Parse.Cloud.BeforeDeleteResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1022,
            "description": "If called, will reject the save. An optional error message may be passed in.",
            "itemtype": "property",
            "name": "error",
            "type": "Function",
            "class": "Parse.Cloud.BeforeDeleteResponse"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1035,
            "description": "The object that was deleted.",
            "itemtype": "property",
            "name": "object",
            "type": "Object",
            "class": "Parse.Cloud.AfterDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1040,
            "description": "If true, means the master key was used",
            "itemtype": "property",
            "name": "master",
            "type": "Boolean",
            "class": "Parse.Cloud.AfterDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1045,
            "description": "If set, the user that made the request.",
            "itemtype": "property",
            "name": "user",
            "type": "Parse.User",
            "class": "Parse.Cloud.AfterDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1050,
            "description": "If set, the installationId triggering the request.",
            "itemtype": "property",
            "name": "installationId",
            "type": "String",
            "class": "Parse.Cloud.AfterDeleteRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1056,
            "description": "Registers a before delete function.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\n\nIf you want use <code>beforeDelete</code> for a predefined class in the\nParse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class\nitself and not the String for <code>arg1</code>.\n\n<pre>\n  Parse.Cloud.beforeDelete('MyCustomClass', function(request, response) {\n    // code here\n  })\n\n  Parse.Cloud.beforeDelete(Parse.User, function(request, response) {\n    // code here\n  })\n</pre>",
            "itemtype": "method",
            "name": "beforeDelete",
            "params": [
                {
                    "name": "arg1",
                    "description": "The Parse.Object subclass to register the before delete\nfunction for.  This can instead be a String that is the className of the\nsubclass.",
                    "type": "Class"
                },
                {
                    "name": "func",
                    "description": "The function to run before a delete.  This function\nshould take two parameters a  {@link Parse.Cloud.BeforeDeleteRequest} and a\n{@link Parse.Cloud.BeforeDeleteResponse}",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1095,
            "description": "Registers an after delete function.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\n\nIf you want to use <code>afterDelete</code> for a predefined class in the\nParse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class\nitself and not the String for <code>arg1</code>.\n\n<pre>\n  Parse.Cloud.afterDelete('MyCustomClass', function(request) {\n    // code here\n  })\n\n  Parse.Cloud.afterDelete(Parse.User, function(request) {\n    // code here\n  })\n</pre>",
            "itemtype": "method",
            "name": "afterDelete",
            "params": [
                {
                    "name": "arg1",
                    "description": "The Parse.Object subclass to register the before save\nfunction for.  This can instead be a String that is the className of the\nsubclass.",
                    "type": "Class"
                },
                {
                    "name": "func",
                    "description": "The function to run before a save.  This function\nshould take just one parameter,   {@link Parse.Cloud.AfterDeleteRequest}.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1134,
            "description": "Defines a Background Job.\n<p><strong><em>Available in Cloud Code only.</em></strong></p>",
            "itemtype": "method",
            "name": "job",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Background Job",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "The Background Job to register.  This function\nshould take two parameters a {@link Parse.Cloud.JobRequest} and a\n{@link Parse.Cloud.JobStatus}",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Cloud"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1170,
            "description": "The params passed to the background job",
            "itemtype": "property",
            "name": "params",
            "type": "Object",
            "class": "Parse.Cloud.JobRequest"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1185,
            "description": "If success is called, will end the job\nsuccessfullly with the optional completion message to be stored in the job\nstatus.",
            "itemtype": "property",
            "name": "success",
            "type": "Function",
            "class": "Parse.Cloud.JobStatus"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1192,
            "description": "If message is called with a string argument,\nwill update the current message to be stored in the job status.",
            "itemtype": "property",
            "name": "message",
            "type": "Function",
            "class": "Parse.Cloud.JobStatus"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1198,
            "description": "If error is called, will end the job\nunsuccessfully with an optional completion message to be stored in the job\nstatus.",
            "itemtype": "property",
            "name": "error",
            "type": "Function",
            "class": "Parse.Cloud.JobStatus"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1248,
            "description": "Registers an auth validator for an aribtrary service\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\n\nA correct validator should do two things:\n1. Ensure that this auth token is valid\n2. <em><strong>Important</strong></em>\n   Ensures that this auth token is associated with this app",
            "params": [
                {
                    "name": "serviceName",
                    "description": "Name of the service authentication occurs with",
                    "type": "String"
                },
                {
                    "name": "f",
                    "description": "The function to run for registration. This function\nshould take two parameters: a {@link Parse.Cloud.ValidateAuthDataRequest}\nand a {@link Prase.Cloud.ValidateAuthDataResponse}",
                    "type": "Function"
                }
            ],
            "class": "Parse.Cloud.JobStatus"
        },
        {
            "file": "../v8server/cloud.js",
            "line": 1263,
            "class": "Parse.Cloud.JobStatus"
        },
        {
            "file": "sdk/src/Analytics.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Analytics"
        },
        {
            "file": "sdk/src/Analytics.js",
            "line": 24,
            "description": "Tracks the occurrence of a custom event with additional dimensions.\nParse will store a data point at the time of invocation with the given\nevent name.\n\nDimensions will allow segmentation of the occurrences of this custom\nevent. Keys and values should be {@code String}s, and will throw\notherwise.\n\nTo track a user signup along with additional metadata, consider the\nfollowing:\n<pre>\nvar dimensions = {\n gender: 'm',\n source: 'web',\n dayType: 'weekend'\n};\nParse.Analytics.track('signup', dimensions);\n</pre>\n\nThere is a default limit of 8 dimensions per event tracked.",
            "itemtype": "method",
            "name": "track",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the custom event to report to Parse as\nhaving happened.",
                    "type": "String"
                },
                {
                    "name": "dimensions",
                    "description": "The dictionary of information by which to\nsegment this event.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved when the round-trip\nto the server completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Analytics"
        },
        {
            "file": "sdk/src/Cloud.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Cloud"
        },
        {
            "file": "sdk/src/Cloud.js",
            "line": 29,
            "description": "Makes a call to a cloud function.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "name",
                    "description": "The function name.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The parameters to send to the cloud function.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object\noptions.success, if set, should be a function to handle a successful\ncall to a cloud function.  options.error should be a function that\nhandles an error running the cloud function.  Both functions are\noptional.  Both functions take a single argument.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that will be resolved with the result\nof the function.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Cloud"
        },
        {
            "file": "sdk/src/CoreManager.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "-weak",
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 98,
            "description": "Initializes Parse Facebook integration.  Call this function after you\nhave loaded the Facebook Javascript SDK with the same parameters\nas you would pass to<code>\n<a href=\n\"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\nFB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\nwith these arguments.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "Facebook options argument as described here:\n  <a href=\n  \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n  FB.init()</a>. The status flag will be coerced to 'false' because it\n  interferes with Parse Facebook integration. Call FB.getLoginStatus()\n  explicitly if this behavior is required by your application.",
                    "type": "Object"
                }
            ],
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 140,
            "description": "Gets whether the user has their account linked to Facebook.",
            "itemtype": "method",
            "name": "isLinked",
            "params": [
                {
                    "name": "user",
                    "description": "User to check for a facebook link.\n    The user must be logged in on this device.",
                    "type": "Parse.User"
                }
            ],
            "return": {
                "description": "<code>true</code> if the user has their account\n    linked to Facebook.",
                "type": "Boolean"
            },
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 153,
            "description": "Logs in a user using Facebook. This method delegates to the Facebook\nSDK to authenticate the user, and then automatically logs in (or\ncreates, in the case where it is a new user) a Parse.User.",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "permissions",
                    "description": "The permissions required for Facebook\n   log in.  This is a comma-separated string of permissions.\n   Alternatively, supply a Facebook authData object as described in our\n   REST API docs if you want to handle getting facebook auth tokens\n   yourself.",
                    "type": "String, Object"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 188,
            "description": "Links Facebook to an existing PFUser. This method delegates to the\nFacebook SDK to authenticate the user, and then automatically links\nthe account to the Parse.User.",
            "itemtype": "method",
            "name": "link",
            "params": [
                {
                    "name": "user",
                    "description": "User to link to Facebook. This must be the\n    current user.",
                    "type": "Parse.User"
                },
                {
                    "name": "permissions",
                    "description": "The permissions required for Facebook\n   log in.  This is a comma-separated string of permissions.\n   Alternatively, supply a Facebook authData object as described in our\n   REST API docs if you want to handle getting facebook auth tokens\n   yourself.",
                    "type": "String, Object"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/FacebookUtils.js",
            "line": 225,
            "description": "Unlinks the Parse.User from a Facebook account.",
            "itemtype": "method",
            "name": "unlink",
            "params": [
                {
                    "name": "user",
                    "description": "User to unlink from Facebook. This must be the\n    current user.",
                    "type": "Parse.User"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.FacebookUtils"
        },
        {
            "file": "sdk/src/InstallationController.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse"
        },
        {
            "file": "sdk/src/ObjectState.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse"
        },
        {
            "file": "sdk/src/Parse.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "class": "Parse"
        },
        {
            "file": "sdk/src/Parse.js",
            "line": 23,
            "description": "Call this method first to set up your authentication tokens for Parse.\nYou can get your keys from the Data Browser on parse.com.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "applicationId",
                    "description": "Your Parse Application ID.",
                    "type": "String"
                },
                {
                    "name": "javaScriptKey",
                    "description": "Your Parse JavaScript Key.",
                    "type": "String"
                },
                {
                    "name": "masterKey",
                    "description": "(optional) Your Parse Master Key. (Node.js only!)",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Parse"
        },
        {
            "file": "sdk/src/Parse.js",
            "line": 50,
            "class": "Parse"
        },
        {
            "file": "sdk/src/Parse.js",
            "line": 83,
            "class": "Parse"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 72,
            "description": "Returns a JSON-encoded version of the ACL.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 85,
            "description": "Returns whether this ACL is equal to another object",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "other",
                    "description": "The other object to compare to"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 163,
            "description": "Sets whether the given user is allowed to read this object.",
            "itemtype": "method",
            "name": "setReadAccess",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId."
                },
                {
                    "name": "allowed",
                    "description": "Whether that user should have read access.",
                    "type": "Boolean"
                }
            ],
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 173,
            "description": "Get whether the given user id is *explicitly* allowed to read this object.\nEven if this returns false, the user may still be able to access it if\ngetPublicReadAccess returns true or a role that the user belongs to has\nwrite access.",
            "itemtype": "method",
            "name": "getReadAccess",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 186,
            "description": "Sets whether the given user id is allowed to write this object.",
            "itemtype": "method",
            "name": "setWriteAccess",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role.."
                },
                {
                    "name": "allowed",
                    "description": "Whether that user should have write access.",
                    "type": "Boolean"
                }
            ],
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 196,
            "description": "Gets whether the given user id is *explicitly* allowed to write this object.\nEven if this returns false, the user may still be able to write it if\ngetPublicWriteAccess returns true or a role that the user belongs to has\nwrite access.",
            "itemtype": "method",
            "name": "getWriteAccess",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 209,
            "description": "Sets whether the public is allowed to read this object.",
            "itemtype": "method",
            "name": "setPublicReadAccess",
            "params": [
                {
                    "name": "allowed",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 218,
            "description": "Gets whether the public is allowed to read this object.",
            "itemtype": "method",
            "name": "getPublicReadAccess",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 227,
            "description": "Sets whether the public is allowed to write this object.",
            "itemtype": "method",
            "name": "setPublicWriteAccess",
            "params": [
                {
                    "name": "allowed",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 236,
            "description": "Gets whether the public is allowed to write this object.",
            "itemtype": "method",
            "name": "getPublicWriteAccess",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 245,
            "description": "Gets whether users belonging to the given role are allowed\nto read this object. Even if this returns false, the role may\nstill be able to write it if a parent role has read access.",
            "itemtype": "method",
            "name": "getRoleReadAccess",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                }
            ],
            "return": {
                "description": "true if the role has read access. false otherwise.",
                "type": "Boolean"
            },
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "TypeError"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 268,
            "description": "Gets whether users belonging to the given role are allowed\nto write this object. Even if this returns false, the role may\nstill be able to write it if a parent role has write access.",
            "itemtype": "method",
            "name": "getRoleWriteAccess",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                }
            ],
            "return": {
                "description": "true if the role has write access. false otherwise.",
                "type": "Boolean"
            },
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "TypeError"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 291,
            "description": "Sets whether users belonging to the given role are allowed\nto read this object.",
            "itemtype": "method",
            "name": "setRoleReadAccess",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                },
                {
                    "name": "allowed",
                    "description": "Whether the given role can read this object.",
                    "type": "Boolean"
                }
            ],
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "TypeError"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseACL.js",
            "line": 313,
            "description": "Sets whether users belonging to the given role are allowed\nto write this object.",
            "itemtype": "method",
            "name": "setRoleWriteAccess",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                },
                {
                    "name": "allowed",
                    "description": "Whether the given role can write this object.",
                    "type": "Boolean"
                }
            ],
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "TypeError"
            },
            "class": "Parse.ACL"
        },
        {
            "file": "sdk/src/ParseConfig.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Config"
        },
        {
            "file": "sdk/src/ParseConfig.js",
            "line": 37,
            "description": "Gets the value of an attribute.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attr",
                    "description": "The name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Parse.Config"
        },
        {
            "file": "sdk/src/ParseConfig.js",
            "line": 46,
            "description": "Gets the HTML-escaped value of an attribute.",
            "itemtype": "method",
            "name": "escape",
            "params": [
                {
                    "name": "attr",
                    "description": "The name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Parse.Config"
        },
        {
            "file": "sdk/src/ParseConfig.js",
            "line": 65,
            "description": "Retrieves the most recently-fetched configuration object, either from\nmemory or from local storage if necessary.",
            "itemtype": "method",
            "name": "current",
            "static": 1,
            "return": {
                "description": "The most recently-fetched Parse.Config if it\n    exists, else an empty Parse.Config.",
                "type": "Config"
            },
            "class": "Parse.Config"
        },
        {
            "file": "sdk/src/ParseConfig.js",
            "line": 79,
            "description": "Gets a new configuration object from the server.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.\nValid options are:<ul>\n  <li>success: Function to call when the get completes successfully.\n  <li>error: Function to call when the get fails.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with a newly-created\n    configuration object when the get completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Config"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 24,
            "description": "Error code indicating some error other than those enumerated here.",
            "itemtype": "property",
            "name": "OTHER_CAUSE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 32,
            "description": "Error code indicating that something has gone wrong with the server.\nIf you get this error code, it is Parse's fault. Contact us at\nhttps://parse.com/help",
            "itemtype": "property",
            "name": "INTERNAL_SERVER_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 42,
            "description": "Error code indicating the connection to the Parse servers failed.",
            "itemtype": "property",
            "name": "CONNECTION_FAILED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 50,
            "description": "Error code indicating the specified object doesn't exist.",
            "itemtype": "property",
            "name": "OBJECT_NOT_FOUND",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 58,
            "description": "Error code indicating you tried to query with a datatype that doesn't\nsupport it, like exact matching an array or object.",
            "itemtype": "property",
            "name": "INVALID_QUERY",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 67,
            "description": "Error code indicating a missing or invalid classname. Classnames are\ncase-sensitive. They must start with a letter, and a-zA-Z0-9_ are the\nonly valid characters.",
            "itemtype": "property",
            "name": "INVALID_CLASS_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 77,
            "description": "Error code indicating an unspecified object id.",
            "itemtype": "property",
            "name": "MISSING_OBJECT_ID",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 85,
            "description": "Error code indicating an invalid key name. Keys are case-sensitive. They\nmust start with a letter, and a-zA-Z0-9_ are the only valid characters.",
            "itemtype": "property",
            "name": "INVALID_KEY_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 94,
            "description": "Error code indicating a malformed pointer. You should not see this unless\nyou have been mucking about changing internal Parse code.",
            "itemtype": "property",
            "name": "INVALID_POINTER",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 103,
            "description": "Error code indicating that badly formed JSON was received upstream. This\neither indicates you have done something unusual with modifying how\nthings encode to JSON, or the network is failing badly.",
            "itemtype": "property",
            "name": "INVALID_JSON",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 113,
            "description": "Error code indicating that the feature you tried to access is only\navailable internally for testing purposes.",
            "itemtype": "property",
            "name": "COMMAND_UNAVAILABLE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 122,
            "description": "You must call Parse.initialize before using the Parse library.",
            "itemtype": "property",
            "name": "NOT_INITIALIZED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 130,
            "description": "Error code indicating that a field was set to an inconsistent type.",
            "itemtype": "property",
            "name": "INCORRECT_TYPE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 138,
            "description": "Error code indicating an invalid channel name. A channel name is either\nan empty string (the broadcast channel) or contains only a-zA-Z0-9_\ncharacters and starts with a letter.",
            "itemtype": "property",
            "name": "INVALID_CHANNEL_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 148,
            "description": "Error code indicating that push is misconfigured.",
            "itemtype": "property",
            "name": "PUSH_MISCONFIGURED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 156,
            "description": "Error code indicating that the object is too large.",
            "itemtype": "property",
            "name": "OBJECT_TOO_LARGE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 164,
            "description": "Error code indicating that the operation isn't allowed for clients.",
            "itemtype": "property",
            "name": "OPERATION_FORBIDDEN",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 172,
            "description": "Error code indicating the result was not found in the cache.",
            "itemtype": "property",
            "name": "CACHE_MISS",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 180,
            "description": "Error code indicating that an invalid key was used in a nested\nJSONObject.",
            "itemtype": "property",
            "name": "INVALID_NESTED_KEY",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 189,
            "description": "Error code indicating that an invalid filename was used for ParseFile.\nA valid file name contains only a-zA-Z0-9_. characters and is between 1\nand 128 characters.",
            "itemtype": "property",
            "name": "INVALID_FILE_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 199,
            "description": "Error code indicating an invalid ACL was provided.",
            "itemtype": "property",
            "name": "INVALID_ACL",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 207,
            "description": "Error code indicating that the request timed out on the server. Typically\nthis indicates that the request is too expensive to run.",
            "itemtype": "property",
            "name": "TIMEOUT",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 216,
            "description": "Error code indicating that the email address was invalid.",
            "itemtype": "property",
            "name": "INVALID_EMAIL_ADDRESS",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 224,
            "description": "Error code indicating a missing content type.",
            "itemtype": "property",
            "name": "MISSING_CONTENT_TYPE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 232,
            "description": "Error code indicating a missing content length.",
            "itemtype": "property",
            "name": "MISSING_CONTENT_LENGTH",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 240,
            "description": "Error code indicating an invalid content length.",
            "itemtype": "property",
            "name": "INVALID_CONTENT_LENGTH",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 248,
            "description": "Error code indicating a file that was too large.",
            "itemtype": "property",
            "name": "FILE_TOO_LARGE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 256,
            "description": "Error code indicating an error saving a file.",
            "itemtype": "property",
            "name": "FILE_SAVE_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 264,
            "description": "Error code indicating that a unique field was given a value that is\nalready taken.",
            "itemtype": "property",
            "name": "DUPLICATE_VALUE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 273,
            "description": "Error code indicating that a role's name is invalid.",
            "itemtype": "property",
            "name": "INVALID_ROLE_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 281,
            "description": "Error code indicating that an application quota was exceeded.  Upgrade to\nresolve.",
            "itemtype": "property",
            "name": "EXCEEDED_QUOTA",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 290,
            "description": "Error code indicating that a Cloud Code script failed.",
            "itemtype": "property",
            "name": "SCRIPT_FAILED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 298,
            "description": "Error code indicating that a Cloud Code validation failed.",
            "itemtype": "property",
            "name": "VALIDATION_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 306,
            "description": "Error code indicating that invalid image data was provided.",
            "itemtype": "property",
            "name": "INVALID_IMAGE_DATA",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 314,
            "description": "Error code indicating an unsaved file.",
            "itemtype": "property",
            "name": "UNSAVED_FILE_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 322,
            "description": "Error code indicating an invalid push time.",
            "itemtype": "property",
            "name": "INVALID_PUSH_TIME_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 330,
            "description": "Error code indicating an error deleting a file.",
            "itemtype": "property",
            "name": "FILE_DELETE_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 338,
            "description": "Error code indicating that the application has exceeded its request\nlimit.",
            "itemtype": "property",
            "name": "REQUEST_LIMIT_EXCEEDED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 347,
            "description": "Error code indicating an invalid event name.",
            "itemtype": "property",
            "name": "INVALID_EVENT_NAME",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 355,
            "description": "Error code indicating that the username is missing or empty.",
            "itemtype": "property",
            "name": "USERNAME_MISSING",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 363,
            "description": "Error code indicating that the password is missing or empty.",
            "itemtype": "property",
            "name": "PASSWORD_MISSING",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 371,
            "description": "Error code indicating that the username has already been taken.",
            "itemtype": "property",
            "name": "USERNAME_TAKEN",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 379,
            "description": "Error code indicating that the email has already been taken.",
            "itemtype": "property",
            "name": "EMAIL_TAKEN",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 387,
            "description": "Error code indicating that the email is missing, but must be specified.",
            "itemtype": "property",
            "name": "EMAIL_MISSING",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 395,
            "description": "Error code indicating that a user with the specified email was not found.",
            "itemtype": "property",
            "name": "EMAIL_NOT_FOUND",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 403,
            "description": "Error code indicating that a user object without a valid session could\nnot be altered.",
            "itemtype": "property",
            "name": "SESSION_MISSING",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 412,
            "description": "Error code indicating that a user can only be created through signup.",
            "itemtype": "property",
            "name": "MUST_CREATE_USER_THROUGH_SIGNUP",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 420,
            "description": "Error code indicating that an an account being linked is already linked\nto another user.",
            "itemtype": "property",
            "name": "ACCOUNT_ALREADY_LINKED",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 429,
            "description": "Error code indicating that the current session token is invalid.",
            "itemtype": "property",
            "name": "INVALID_SESSION_TOKEN",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 437,
            "description": "Error code indicating that a user cannot be linked to an account because\nthat account's id could not be found.",
            "itemtype": "property",
            "name": "LINKED_ID_MISSING",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 446,
            "description": "Error code indicating that a user with a linked (e.g. Facebook) account\nhas an invalid session.",
            "itemtype": "property",
            "name": "INVALID_LINKED_SESSION",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 455,
            "description": "Error code indicating that a service being linked (e.g. Facebook or\nTwitter) is unsupported.",
            "itemtype": "property",
            "name": "UNSUPPORTED_SERVICE",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 464,
            "description": "Error code indicating that there were multiple errors. Aggregate errors\nhave an \"errors\" property, which is an array of error objects with more\ndetail about each error that occurred.",
            "itemtype": "property",
            "name": "AGGREGATE_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 474,
            "description": "Error code indicating the client was unable to read an input file.",
            "itemtype": "property",
            "name": "FILE_READ_ERROR",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseError.js",
            "line": 482,
            "description": "Error code indicating a real error code is unavailable because\nwe had to use an XDomainRequest object to allow CORS requests in\nInternet Explorer, which strips the body from HTTP responses that have\na non-2XX status code.",
            "itemtype": "property",
            "name": "X_DOMAIN_REQUEST",
            "static": 1,
            "final": 1,
            "class": "Parse.Error"
        },
        {
            "file": "sdk/src/ParseFile.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.File"
        },
        {
            "file": "sdk/src/ParseFile.js",
            "line": 122,
            "description": "Gets the name of the file. Before save is called, this is the filename\ngiven by the user. After save is called, that name gets prefixed with a\nunique identifier.",
            "itemtype": "method",
            "name": "name",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Parse.File"
        },
        {
            "file": "sdk/src/ParseFile.js",
            "line": 133,
            "description": "Gets the url of the file. It is only available after you save the file or\nafter you get the file from a Parse.Object.",
            "itemtype": "method",
            "name": "url",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Parse.File"
        },
        {
            "file": "sdk/src/ParseFile.js",
            "line": 143,
            "description": "Saves the file to the Parse cloud.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise that is resolved when the save finishes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.File"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 65,
            "description": "North-south portion of the coordinate, in range [-90, 90].\nThrows an exception if set out of range in a modern browser.",
            "itemtype": "property",
            "name": "latitude",
            "type": "Number",
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 80,
            "description": "East-west portion of the coordinate, in range [-180, 180].\nThrows if set out of range in a modern browser.",
            "itemtype": "property",
            "name": "longitude",
            "type": "Number",
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 95,
            "description": "Returns a JSON representation of the GeoPoint, suitable for Parse.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 117,
            "description": "Returns the distance from this GeoPoint to another in radians.",
            "itemtype": "method",
            "name": "radiansTo",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 141,
            "description": "Returns the distance from this GeoPoint to another in kilometers.",
            "itemtype": "method",
            "name": "kilometersTo",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 151,
            "description": "Returns the distance from this GeoPoint to another in miles.",
            "itemtype": "method",
            "name": "milesTo",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 161,
            "description": "Throws an exception if the given lat-long is out of bounds.",
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseGeoPoint.js",
            "line": 192,
            "description": "Creates a GeoPoint with the user's current location, if available.\nCalls options.success with a new GeoPoint instance or calls options.error.",
            "itemtype": "method",
            "name": "current",
            "params": [
                {
                    "name": "options",
                    "description": "An object with success and error callbacks.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "Parse.GeoPoint"
        },
        {
            "file": "sdk/src/ParseInstallation.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 100,
            "description": "The ID of this object, unique within its class.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 140,
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 148,
            "description": "The first time this object was saved on the server.",
            "itemtype": "property",
            "name": "createdAt",
            "type": "Date",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 157,
            "description": "The last time this object was updated on the server.",
            "itemtype": "property",
            "name": "updatedAt",
            "type": "Date",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 166,
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 168,
            "description": "Returns a local or server Id used uniquely identify this object",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 183,
            "description": "Returns a local or server Id used to pull data from the Object State store\nIf single instance objects are disabled, it will use the object's unique\ncount to separate its data from other objects with the same server Id.",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 377,
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 383,
            "description": "Returns a JSON version of the object suitable for saving to Parse.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 411,
            "description": "Determines whether this ParseObject is equal to another ParseObject",
            "itemtype": "method",
            "name": "equals",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 428,
            "description": "Returns true if this object has been modified since its last\nsave/refresh.  If an attribute is specified, it returns true only if that\nparticular attribute has been modified since the last save/refresh.",
            "itemtype": "method",
            "name": "dirty",
            "params": [
                {
                    "name": "attr",
                    "description": "An attribute name (optional).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 462,
            "description": "Returns an array of keys that have been modified since last save/refresh",
            "itemtype": "method",
            "name": "dirtyKeys",
            "return": {
                "description": "",
                "type": "Array of string"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 482,
            "description": "Gets a Pointer referencing this Object.",
            "itemtype": "method",
            "name": "toPointer",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 498,
            "description": "Gets the value of an attribute.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 507,
            "description": "Gets a relation on the given class for the attribute.",
            "itemtype": "method",
            "name": "relation",
            "params": [
                {
                    "name": "String",
                    "description": "attr The attribute to get the relation for."
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 524,
            "description": "Gets the HTML-escaped value of an attribute.",
            "itemtype": "method",
            "name": "escape",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 544,
            "description": "Returns <code>true</code> if the attribute contains a value that is not\nnull or undefined.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 559,
            "description": "Sets a hash of model attributes on the object.\n\n<p>You can call it with an object containing keys and values, or with one\nkey and value.  For example:<pre>\n  gameTurn.set({\n    player: player1,\n    diceRoll: 2\n  }, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"currentPlayer\", player2, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"finished\", true);</pre></p>",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to give it."
                },
                {
                    "name": "options",
                    "description": "A set of options for the set.\n    The only supported option is <code>error</code>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the set succeeded.",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 669,
            "description": "Remove an attribute from the model. This is a noop if the attribute doesn't\nexist.",
            "itemtype": "method",
            "name": "unset",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 681,
            "description": "Atomically increments the value of the given attribute the next time the\nobject is saved. If no amount is specified, 1 is used by default.",
            "itemtype": "method",
            "name": "increment",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "amount",
                    "description": "The amount to increment by (optional).",
                    "type": "Number"
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 699,
            "description": "Atomically add an object to the end of the array associated with a given\nkey.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The item to add."
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 710,
            "description": "Atomically add an object to the array associated with a given key, only\nif it is not already present in the array. The position of the insert is\nnot guaranteed.",
            "itemtype": "method",
            "name": "addUnique",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The object to add."
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 723,
            "description": "Atomically remove all instances of an object from the array associated\nwith a given key.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The object to remove."
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 735,
            "description": "Returns an instance of a subclass of Parse.Op describing what kind of\nmodification has been performed on this field since the last time it was\nsaved. For example, after calling object.increment(\"x\"), calling\nobject.op(\"x\") would return an instance of Parse.Op.Increment.",
            "itemtype": "method",
            "name": "op",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The operation, or undefined if none.",
                "type": "Parse.Op"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 754,
            "description": "Creates a new model with identical attributes to this one.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Parse.Object"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 770,
            "description": "Returns true if this object has never been saved to Parse.",
            "itemtype": "method",
            "name": "isNew",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 779,
            "description": "Returns true if this object was created by the Parse server when the\nobject might have already been there (e.g. in the case of a Facebook\nlogin)",
            "itemtype": "method",
            "name": "existed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 797,
            "description": "Checks if the model is currently in a valid state.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 806,
            "description": "You should not call this function directly unless you subclass\n<code>Parse.Object</code>, in which case you can override this method\nto provide additional validation on <code>set</code> and\n<code>save</code>.  Your implementation should return",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "attrs",
                    "description": "The current data to validate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "False if the data is valid.  An error object otherwise."
            },
            "see": [
                "Parse.Object#set"
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 832,
            "description": "Returns the ACL for this object.",
            "itemtype": "method",
            "name": "getACL",
            "return": {
                "description": "An instance of Parse.ACL.",
                "type": "Parse.ACL"
            },
            "see": [
                "Parse.Object#get"
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 846,
            "description": "Sets the ACL to be used for this object.",
            "itemtype": "method",
            "name": "setACL",
            "params": [
                {
                    "name": "acl",
                    "description": "An instance of Parse.ACL.",
                    "type": "Parse.ACL"
                },
                {
                    "name": "options",
                    "description": "Optional Backbone-like options object to be\n    passed in to set.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the set passed validation.",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object#set"
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 859,
            "description": "Clears all attributes on a model",
            "itemtype": "method",
            "name": "clear",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 878,
            "description": "Fetch the model from the server. If the server's representation of the\nmodel differs from its current attributes, they will be overriden.",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the fetch\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 908,
            "description": "Set a hash of model attributes, and save the model to the server.\nupdatedAt will be updated when the request returns.\nYou can either call it as:<pre>\n  object.save();</pre>\nor<pre>\n  object.save(null, options);</pre>\nor<pre>\n  object.save(attrs, options);</pre>\nor<pre>\n  object.save(key, value, options);</pre>\n\nFor example, <pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }, {\n    success: function(gameTurnAgain) {\n      // The save was successful.\n    },\n    error: function(gameTurnAgain, error) {\n      // The save failed.  Error is an instance of Parse.Error.\n    }\n  });</pre>\nor with promises:<pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }).then(function(gameTurnAgain) {\n    // The save was successful.\n  }, function(error) {\n    // The save failed.  Error is an instance of Parse.Error.\n  });</pre>",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the save\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1011,
            "description": "Destroy this model on the server if it was already persisted.\nIf `wait: true` is passed, waits for the server to respond\nbefore removal.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the destroy\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1047,
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1053,
            "description": "Fetches the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were fetched.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "itemtype": "method",
            "name": "fetchAll",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "static": "Valid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n</ul>",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1094,
            "description": "Fetches the given list of Parse.Object if needed.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAllIfNeeded([object1, ...], {\n    success: function(list) {\n      // Objects were fetched and updated.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "itemtype": "method",
            "name": "fetchAllIfNeeded",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "static": "Valid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n</ul>",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1135,
            "description": "Destroy the given list of models on the server if it was already persisted.\n\n<p>Unlike saveAll, if an error occurs while deleting an individual model,\nthis method will continue trying to delete the rest of the models if\npossible, except in the case of a fatal error like a connection error.\n\n<p>In particular, the Parse.Error object returned in the case of error may\nbe one of two types:\n\n<ul>\n  <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n      array of other Parse.Error objects. Each error object in this array\n      has an \"object\" property that references the object that could not be\n      deleted (for instance, because that object could not be found).</li>\n  <li>A non-aggregate Parse.Error. This indicates a serious error that\n      caused the delete operation to be aborted partway through (for\n      instance, a connection failure in the middle of the delete).</li>\n</ul>\n\n<pre>\n  Parse.Object.destroyAll([object1, object2, ...], {\n    success: function() {\n      // All the objects were deleted.\n    },\n    error: function(error) {\n      // An error occurred while deleting one or more of the objects.\n      // If this is an aggregate error, then we can inspect each error\n      // object individually to determine the reason why a particular\n      // object was not deleted.\n      if (error.code === Parse.Error.AGGREGATE_ERROR) {\n        for (var i = 0; i < error.errors.length; i++) {\n          console.log(\"Couldn't delete \" + error.errors[i].object.id +\n            \"due to \" + error.errors[i].message);\n        }\n      } else {\n        console.log(\"Delete aborted because of \" + error.message);\n      }\n    },\n  });\n</pre>",
            "itemtype": "method",
            "name": "destroyAll",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "static": "Valid options are:<ul>\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
            "return": {
                "description": "A promise that is fulfilled when the destroyAll\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1206,
            "description": "Saves the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.saveAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were saved.\n    },\n    error: function(error) {\n      // An error occurred while saving one of the objects.\n    },\n  });\n</pre>",
            "itemtype": "method",
            "name": "saveAll",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "static": "Valid options are:<ul>\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1248,
            "description": "Creates a reference to a subclass of Parse.Object with the given id. This\ndoes not exist on Parse.Object, only on subclasses.\n\n<p>A shortcut for: <pre>\n var Foo = Parse.Object.extend(\"Foo\");\n var pointerToFoo = new Foo();\n pointerToFoo.id = \"myObjectId\";\n</pre>",
            "itemtype": "method",
            "name": "createWithoutData",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to create a reference to.",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "A Parse.Object reference.",
                "type": "Parse.Object"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1269,
            "description": "Creates a new instance of a Parse Object from a JSON representation.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "The JSON map of the Object's data",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "A Parse.Object reference",
                "type": "Parse.Object"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1295,
            "description": "Registers a subclass of Parse.Object with a specific class name.\nWhen objects of that class are retrieved from a query, they will be\ninstantiated with this subclass.\nThis is only necessary when using ES6 subclassing.",
            "itemtype": "method",
            "name": "registerSubclass",
            "params": [
                {
                    "name": "className",
                    "description": "The class name of the subclass",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "The subclass",
                    "type": "Class"
                }
            ],
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1323,
            "description": "Creates a new subclass of Parse.Object for the given Parse class name.\n\n<p>Every extension of a Parse class will inherit from the most recent\nprevious extension of that class. When a Parse.Object is automatically\ncreated by parsing JSON, it will use the most recent extension of that\nclass.</p>\n\n<p>You should call either:<pre>\n    var MyClass = Parse.Object.extend(\"MyClass\", {\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre>\nor, for Backbone compatibility:<pre>\n    var MyClass = Parse.Object.extend({\n        className: \"MyClass\",\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre></p>",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "className",
                    "description": "The name of the Parse class backing this model.",
                    "type": "String"
                },
                {
                    "name": "protoProps",
                    "description": "Instance properties to add to instances of the\n    class returned from this method.",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "Class properties to add the class returned from\n    this method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new subclass of Parse.Object.",
                "type": "Class"
            },
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1447,
            "description": "Enable single instance objects, where any local objects with the same Id\nshare the same attributes, and stay synchronized with each other.\nThis is disabled by default in server environments, since it can lead to\nsecurity issues.",
            "itemtype": "method",
            "name": "enableSingleInstance",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseObject.js",
            "line": 1458,
            "description": "Disable single instance objects, where any local objects with the same Id\nshare the same attributes, and stay synchronized with each other.\nWhen disabled, you can have two instances of the same object in memory\nwithout them sharing attributes.",
            "itemtype": "method",
            "name": "disableSingleInstance",
            "class": "Parse.Object"
        },
        {
            "file": "sdk/src/ParseOp.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 36,
            "description": "Marks this promise as fulfilled, firing any callbacks waiting on it.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "result",
                    "description": "the result to pass to the callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 58,
            "description": "Marks this promise as fulfilled, firing any callbacks waiting on it.",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "error",
                    "description": "the error to pass to the callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 79,
            "description": "Adds callbacks to be called when this promise is fulfilled. Returns a new\nPromise that will be fulfilled when the callback is complete. It allows\nchaining. If the callback itself returns a Promise, then the one returned\nby \"then\" will not be fulfilled until that one returned by the callback\nis fulfilled.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "resolvedCallback",
                    "description": "Function that is called when this\nPromise is resolved. Once the callback is complete, then the Promise\nreturned by \"then\" will also be fulfilled.",
                    "type": "Function"
                },
                {
                    "name": "rejectedCallback",
                    "description": "Function that is called when this\nPromise is rejected with an error. Once the callback is complete, then\nthe promise returned by \"then\" with be resolved successfully. If\nrejectedCallback is null, or it returns a rejected Promise, then the\nPromise returned by \"then\" will be rejected with that error.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new Promise that will be fulfilled after this\nPromise is fulfilled and either callback has completed. If the callback\nreturned a Promise, then this Promise will not be fulfilled until that\none is.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 187,
            "description": "Add handlers to be called when the promise\nis either resolved or rejected",
            "itemtype": "method",
            "name": "always",
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 196,
            "description": "Add handlers to be called when the Promise object is resolved",
            "itemtype": "method",
            "name": "done",
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 204,
            "description": "Add handlers to be called when the Promise object is rejected",
            "itemtype": "method",
            "name": "fail",
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 212,
            "description": "Run the given callbacks after this promise is fulfilled.",
            "itemtype": "method",
            "name": "_thenRunCallbacks",
            "params": [
                {
                    "name": "optionsOrCallback",
                    "description": "A Backbone-style options callback, or a\ncallback function. If this is an options object and contains a \"model\"\nattributes, that will be passed to error callbacks as the first argument."
                },
                {
                    "name": "model",
                    "description": "If truthy, this will be passed as the first result of\nerror callbacks. This is for Backbone-compatability."
                }
            ],
            "return": {
                "description": "A promise that will be resolved after the\ncallbacks are run, with the same result as this.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 260,
            "description": "Adds a callback function that should be called regardless of whether\nthis promise failed or succeeded. The callback will be given either the\narray of results for its first argument, or the error as its second,\ndepending on whether this Promise was rejected or resolved. Returns a\nnew Promise, like \"then\" would.",
            "itemtype": "method",
            "name": "_continueWith",
            "params": [
                {
                    "name": "continuation",
                    "description": "the callback.",
                    "type": "Function"
                }
            ],
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 277,
            "description": "Returns true iff the given object fulfils the Promise interface.",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "promise",
                    "description": "The object to test",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 291,
            "description": "Returns a new promise that is resolved with a given value.",
            "itemtype": "method",
            "name": "as",
            "params": [
                {
                    "name": "value",
                    "description": "The value to resolve the promise with"
                }
            ],
            "static": 1,
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 304,
            "description": "Returns a new promise that is rejected with a given error.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "The error to reject the promise with"
                }
            ],
            "static": 1,
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 317,
            "description": "Returns a new promise that is fulfilled when all of the input promises\nare resolved. If any promise in the list fails, then the returned promise\nwill be rejected with an array containing the error from each promise.\nIf they all succeed, then the returned promise will succeed, with the\nresults being the results of all the input\npromises. For example: <pre>\n  var p1 = Parse.Promise.as(1);\n  var p2 = Parse.Promise.as(2);\n  var p3 = Parse.Promise.as(3);\n\n  Parse.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {\n    console.log(r1);  // prints 1\n    console.log(r2);  // prints 2\n    console.log(r3);  // prints 3\n  });</pre>\n\nThe input promises can also be specified as an array: <pre>\n  var promises = [p1, p2, p3];\n  Parse.Promise.when(promises).then(function(results) {\n    console.log(results);  // prints [1,2,3]\n  });\n</pre>",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "promises",
                    "description": "a list of promises to wait for.",
                    "type": "Array"
                }
            ],
            "static": 1,
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParsePromise.js",
            "line": 399,
            "description": "Runs the given asyncFunction repeatedly, as long as the predicate\nfunction returns a truthy value. Stops repeating if asyncFunction returns\na rejected promise.",
            "itemtype": "method",
            "name": "_continueWhile",
            "params": [
                {
                    "name": "predicate",
                    "description": "should return false when ready to stop.",
                    "type": "Function"
                },
                {
                    "name": "asyncFunction",
                    "description": "should return a Promise.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "Parse.Promise"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 36,
            "description": "Converts a string into a regex that matches it.\nSurrounding with \\Q .. \\E does this, we just need to escape any \\E's in\nthe text separately.",
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 140,
            "description": "Adds constraint that at least one of the passed in queries matches.",
            "itemtype": "method",
            "name": "_orQuery",
            "params": [
                {
                    "name": "queries",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 155,
            "description": "Helper for condition queries",
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 166,
            "description": "Returns a JSON representation of this query.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON representation of the query.",
                "type": "Object"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 198,
            "description": "Constructs a Parse.Object whose id is already known by fetching data from\nthe server.  Either options.success or options.error is called when the\nfind completes.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "objectId",
                    "description": "The id of the object to be fetched.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the result when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 242,
            "description": "Retrieves a list of ParseObjects that satisfy this query.\nEither options.success or options.error is called when the find\ncompletes.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the find completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the results when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 288,
            "description": "Counts the number of objects that match this query.\nEither options.success or options.error is called when the count\ncompletes.",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the count completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the count when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 333,
            "description": "Retrieves at most one Parse.Object that satisfies this query.\n\nEither options.success or options.error is called when it completes.\nsuccess is passed the object if there is one. otherwise, undefined.",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the find completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n  <li>sessionToken: A valid session token, used for making a request on\n      behalf of a specific user.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the object when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 385,
            "description": "Iterates over each result of a query, calling a callback for each one. If\nthe callback returns a promise, the iteration will not continue until\nthat promise has been fulfilled. If the callback returns a rejected\npromise, then iteration will stop with that error. The items are\nprocessed in an unspecified order. The query may not have any sort order,\nand may not use limit or skip.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback that will be called with each result\n    of the query.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "An optional Backbone-like options object with\n    success and error callbacks that will be invoked once the iteration\n    has finished.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that will be fulfilled once the\n    iteration has completed.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 475,
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 477,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe equal to the provided value.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that the Parse.Object must contain."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 494,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe not equal to the provided value.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that must not be equalled."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 506,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe less than the provided value.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an upper bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 518,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe greater than the provided value.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an lower bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 530,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe less than or equal to the provided value.",
            "itemtype": "method",
            "name": "lessThanOrEqualTo",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an upper bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 542,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe greater than or equal to the provided value.",
            "itemtype": "method",
            "name": "greaterThanOrEqualTo",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an lower bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 554,
            "description": "Adds a constraint to the query that requires a particular key's value to\nbe contained in the provided list of values.",
            "itemtype": "method",
            "name": "containedIn",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 566,
            "description": "Adds a constraint to the query that requires a particular key's value to\nnot be contained in the provided list of values.",
            "itemtype": "method",
            "name": "notContainedIn",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will not match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 578,
            "description": "Adds a constraint to the query that requires a particular key's value to\ncontain each one of the provided list of values.",
            "itemtype": "method",
            "name": "containsAll",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.  This key's value must be an array.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 590,
            "description": "Adds a constraint for finding objects that contain the given key.",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "key",
                    "description": "The key that should exist.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 600,
            "description": "Adds a constraint for finding objects that do not contain a given key.",
            "itemtype": "method",
            "name": "doesNotExist",
            "params": [
                {
                    "name": "key",
                    "description": "The key that should not exist",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 610,
            "description": "Adds a regular expression constraint for finding string values that match\nthe provided regular expression.\nThis may be slow for large datasets.",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "regex",
                    "description": "The regular expression pattern to match.",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 636,
            "description": "Adds a constraint that requires that a key's value matches a Parse.Query\nconstraint.",
            "itemtype": "method",
            "name": "matchesQuery",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the contains the object to match the\n                    query.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query that should match.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 651,
            "description": "Adds a constraint that requires that a key's value not matches a\nParse.Query constraint.",
            "itemtype": "method",
            "name": "doesNotMatchQuery",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the contains the object to match the\n                    query.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query that should not match.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 666,
            "description": "Adds a constraint that requires that a key's value matches a value in\nan object returned by a different Parse.Query.",
            "itemtype": "method",
            "name": "matchesKeyInQuery",
            "params": [
                {
                    "name": "key",
                    "description": "The key that contains the value that is being\n                    matched.",
                    "type": "String"
                },
                {
                    "name": "queryKey",
                    "description": "The key in the objects returned by the query to\n                         match against.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query to run.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 686,
            "description": "Adds a constraint that requires that a key's value not match a value in\nan object returned by a different Parse.Query.",
            "itemtype": "method",
            "name": "doesNotMatchKeyInQuery",
            "params": [
                {
                    "name": "key",
                    "description": "The key that contains the value that is being\n                    excluded.",
                    "type": "String"
                },
                {
                    "name": "queryKey",
                    "description": "The key in the objects returned by the query to\n                         match against.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query to run.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 706,
            "description": "Adds a constraint for finding string values that contain a provided\nstring.  This may be slow for large datasets.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "substring",
                    "description": "The substring that the value must contain.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 721,
            "description": "Adds a constraint for finding string values that start with a provided\nstring.  This query will use the backend index, so it will be fast even\nfor large datasets.",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "The substring that the value must start with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 737,
            "description": "Adds a constraint for finding string values that end with a provided\nstring.  This will be slow for large datasets.",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "The substring that the value must end with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 752,
            "description": "Adds a proximity based constraint for finding objects with key point\nvalues near the point given.",
            "itemtype": "method",
            "name": "near",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 768,
            "description": "Adds a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.",
            "itemtype": "method",
            "name": "withinRadians",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in radians) of results to\n  return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 783,
            "description": "Adds a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 3958.8 miles.",
            "itemtype": "method",
            "name": "withinMiles",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in miles) of results to\n    return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 798,
            "description": "Adds a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 6371.0 kilometers.",
            "itemtype": "method",
            "name": "withinKilometers",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in kilometers) of results\n    to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 813,
            "description": "Adds a constraint to the query that requires a particular key's\ncoordinates be contained within a given rectangular geographic bounding\nbox.",
            "itemtype": "method",
            "name": "withinGeoBox",
            "params": [
                {
                    "name": "key",
                    "description": "The key to be constrained.",
                    "type": "String"
                },
                {
                    "name": "southwest",
                    "description": "The lower-left inclusive corner of the box.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "northeast",
                    "description": "The upper-right inclusive corner of the box.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 836,
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 838,
            "description": "Sorts the results in ascending order by the given key.",
            "itemtype": "method",
            "name": "ascending",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 851,
            "description": "Sorts the results in ascending order by the given key,\nbut can also add secondary sort descriptors without overwriting _order.",
            "itemtype": "method",
            "name": "addAscending",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 874,
            "description": "Sorts the results in descending order by the given key.",
            "itemtype": "method",
            "name": "descending",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 887,
            "description": "Sorts the results in descending order by the given key,\nbut can also add secondary sort descriptors without overwriting _order.",
            "itemtype": "method",
            "name": "addDescending",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 914,
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 916,
            "description": "Sets the number of results to skip before returning any results.\nThis is useful for pagination.\nDefault is to skip zero results.",
            "itemtype": "method",
            "name": "skip",
            "params": [
                {
                    "name": "n",
                    "description": "the number of results to skip.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 932,
            "description": "Sets the limit of the number of results to return. The default limit is\n100, with a maximum of 1000 results being returned at a time.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "n",
                    "description": "the number of results to limit to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 947,
            "description": "Includes nested Parse.Objects for the provided key.  You can use dot\nnotation to specify which fields in the included object are also fetched.",
            "itemtype": "method",
            "name": "include",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key to include.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 965,
            "description": "Restricts the fields of the returned Parse.Objects to include only the\nprovided keys.  If this is called multiple times, then all of the keys\nspecified in each of the calls will be included.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "keys",
                    "description": "The names of the keys to include.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseQuery.js",
            "line": 987,
            "description": "Constructs a Parse.Query that is the OR of the passed in queries.  For\nexample:\n<pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n\nwill create a compoundQuery that is an or of the query1, query2, and\nquery3.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "var_args",
                    "description": "The list of queries to OR.",
                    "type": "...Parse.Query"
                }
            ],
            "static": 1,
            "return": {
                "description": "The query that is the OR of the passed in queries.",
                "type": "Parse.Query"
            },
            "class": "Parse.Query"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 42,
            "description": "Makes sure that this relation has the right parent and key.",
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 72,
            "description": "Adds a Parse.Object or an array of Parse.Objects to the relation.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "objects",
                    "description": "The item or items to add."
                }
            ],
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 88,
            "description": "Removes a Parse.Object or an array of Parse.Objects from this relation.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "objects",
                    "description": "The item or items to remove."
                }
            ],
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 103,
            "description": "Returns a JSON version of the object suitable for saving to disk.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRelation.js",
            "line": 115,
            "description": "Returns a Parse.Query that is limited to objects in this\nrelation.",
            "itemtype": "method",
            "name": "query",
            "return": {
                "description": "",
                "type": "Parse.Query"
            },
            "class": "Parse.Relation"
        },
        {
            "file": "sdk/src/ParseRole.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Role"
        },
        {
            "file": "sdk/src/ParseRole.js",
            "line": 44,
            "description": "Gets the name of the role.  You can alternatively call role.get(\"name\")",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of the role.",
                "type": "String"
            },
            "class": "Parse.Role"
        },
        {
            "file": "sdk/src/ParseRole.js",
            "line": 54,
            "description": "Sets the name for a role. This value must be set before the role has\nbeen saved to the server, and cannot be set once the role has been\nsaved.\n\n<p>\n  A role's name can only contain alphanumeric characters, _, -, and\n  spaces.\n</p>\n\n<p>This is equivalent to calling role.set(\"name\", name)</p>",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the role.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n    callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Parse.Role"
        },
        {
            "file": "sdk/src/ParseRole.js",
            "line": 75,
            "description": "Gets the Parse.Relation for the Parse.Users that are direct\nchildren of this role. These users are granted any privileges that this\nrole has been granted (e.g. read or write access through ACLs). You can\nadd or remove users from the role through this relation.\n\n<p>This is equivalent to calling role.relation(\"users\")</p>",
            "itemtype": "method",
            "name": "getUsers",
            "return": {
                "description": "the relation for the users belonging to this\n    role.",
                "type": "Parse.Relation"
            },
            "class": "Parse.Role"
        },
        {
            "file": "sdk/src/ParseRole.js",
            "line": 91,
            "description": "Gets the Parse.Relation for the Parse.Roles that are direct\nchildren of this role. These roles' users are granted any privileges that\nthis role has been granted (e.g. read or write access through ACLs). You\ncan add or remove child roles from this role through this relation.\n\n<p>This is equivalent to calling role.relation(\"roles\")</p>",
            "itemtype": "method",
            "name": "getRoles",
            "return": {
                "description": "the relation for the roles belonging to this\n    role.",
                "type": "Parse.Relation"
            },
            "class": "Parse.Role"
        },
        {
            "file": "sdk/src/ParseSession.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Session"
        },
        {
            "file": "sdk/src/ParseSession.js",
            "line": 39,
            "description": "Returns the session token string.",
            "itemtype": "method",
            "name": "getSessionToken",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Parse.Session"
        },
        {
            "file": "sdk/src/ParseSession.js",
            "line": 59,
            "description": "Retrieves the Session object for the currently logged in session.",
            "itemtype": "method",
            "name": "current",
            "static": 1,
            "return": {
                "description": "A promise that is resolved with the Parse.Session\n  object after it has been fetched. If there is no current user, the\n  promise will be rejected.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Session"
        },
        {
            "file": "sdk/src/ParseSession.js",
            "line": 85,
            "description": "Determines whether the current session token is revocable.\nThis method is useful for migrating Express.js or Node.js web apps to\nuse revocable sessions. If you are migrating an app that uses the Parse\nSDK in the browser only, please use Parse.User.enableRevocableSession()\ninstead, so that sessions can be automatically upgraded.",
            "itemtype": "method",
            "name": "isCurrentSessionRevocable",
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.Session"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 53,
            "description": "Request a revocable session token to replace the older style of token.",
            "itemtype": "method",
            "name": "_upgradeToRevocableSession",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved when the replacement\n  token has been fetched.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 75,
            "description": "Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can\ncall linkWith on the user (even if it doesn't exist yet on the server).",
            "itemtype": "method",
            "name": "_linkWith",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 126,
            "description": "Synchronizes auth data for a provider (e.g. puts the access token in the\nright place to be used by the Facebook SDK).",
            "itemtype": "method",
            "name": "_synchronizeAuthData",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 152,
            "description": "Synchronizes authData for all providers.",
            "itemtype": "method",
            "name": "_synchronizeAllAuthData",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 167,
            "description": "Removes null values from authData (which exist temporarily for\nunlinking)",
            "itemtype": "method",
            "name": "_cleanupAuthData",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 188,
            "description": "Unlinks a user from a service.",
            "itemtype": "method",
            "name": "_unlinkFrom",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 206,
            "description": "Checks whether a user is linked to a service.",
            "itemtype": "method",
            "name": "_isLinked",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 221,
            "description": "Deauthenticates all providers.",
            "itemtype": "method",
            "name": "_logOutWithAll",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 236,
            "description": "Deauthenticates a single provider (e.g. removing access tokens from the\nFacebook SDK).",
            "itemtype": "method",
            "name": "_logOutWith",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 253,
            "description": "Returns true if <code>current</code> would return this user.",
            "itemtype": "method",
            "name": "isCurrent",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 263,
            "description": "Returns get(\"username\").",
            "itemtype": "method",
            "name": "getUsername",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 272,
            "description": "Calls set(\"username\", username, options) and returns the result.",
            "itemtype": "method",
            "name": "setUsername",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 290,
            "description": "Calls set(\"password\", password, options) and returns the result.",
            "itemtype": "method",
            "name": "setPassword",
            "params": [
                {
                    "name": "password",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 301,
            "description": "Returns get(\"email\").",
            "itemtype": "method",
            "name": "getEmail",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 310,
            "description": "Calls set(\"email\", email, options) and returns the result.",
            "itemtype": "method",
            "name": "setEmail",
            "params": [
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 321,
            "description": "Returns the session token for this user, if the user has been logged in,\nor if it is the result of a query with the master key. Otherwise, returns\nundefined.",
            "itemtype": "method",
            "name": "getSessionToken",
            "return": {
                "description": "the session token, or undefined",
                "type": "String"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 332,
            "description": "Checks whether this user is the current user and has been authenticated.",
            "itemtype": "method",
            "name": "authenticated",
            "return": {
                "description": "(Boolean) whether this user is the current user and is logged in."
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 346,
            "description": "Signs up a new user. You should call this instead of save for\nnew Parse.Users. This will create a new Parse.User on the server, and\nalso persist the session on disk so that you can access the user using\n<code>current</code>.\n\n<p>A username and password must be set before calling signUp.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "signUp",
            "params": [
                {
                    "name": "attrs",
                    "description": "Extra fields to set on the new user, or null.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the signup\n    finishes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 378,
            "description": "Logs in a Parse.User. On success, this saves the session to disk,\nso you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>A username and password must be set before calling logIn.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login is complete.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 404,
            "description": "Wrap the default save behavior with functionality to save to local\nstorage if this is current user.",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 417,
            "description": "Wrap the default fetch behavior with functionality to save to local\nstorage if this is current user.",
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 434,
            "description": "Adds functionality to the existing Parse.User class",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoProps",
                    "description": "A set of properties to add to the prototype",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "A set of static properties to add to the class",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "The newly extended Parse.User class",
                "type": "Class"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 472,
            "description": "Retrieves the currently logged in ParseUser with a valid session,\neither from memory or localStorage, if necessary.",
            "itemtype": "method",
            "name": "current",
            "static": 1,
            "return": {
                "description": "The currently logged in Parse.User.",
                "type": "Parse.Object"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 487,
            "description": "Retrieves the currently logged in ParseUser from asynchronous Storage.",
            "itemtype": "method",
            "name": "currentAsync",
            "static": 1,
            "return": {
                "description": "A Promise that is resolved with the currently\n  logged in Parse User",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 502,
            "description": "Signs up a new user with a username (or email) and password.\nThis will create a new Parse.User on the server, and also persist the\nsession in localStorage so that you can access the user using\n{@link #current}.\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "signUp",
            "params": [
                {
                    "name": "username",
                    "description": "The username (or email) to sign up with.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password to sign up with.",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "Extra fields to set on the new user.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the signup completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 527,
            "description": "Logs in a user with a username (or email) and password. On success, this\nsaves the session to disk, so you can retrieve the currently logged in\nuser using <code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "username",
                    "description": "The username (or email) to log in with.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password to log in with.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 548,
            "description": "Logs in a user with a session token. On success, this saves the session\nto disk, so you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "become",
            "params": [
                {
                    "name": "sessionToken",
                    "description": "The sessionToken to log in with.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 585,
            "description": "Logs out the currently logged in user session. This will remove the\nsession from disk, log out of linked services, and future calls to\n<code>current</code> will return <code>null</code>.",
            "itemtype": "method",
            "name": "logOut",
            "static": 1,
            "return": {
                "description": "A promise that is resolved when the session is\n  destroyed on the server.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 605,
            "description": "Requests a password reset email to be sent to the specified email address\nassociated with the user account. This email allows the user to securely\nreset their password on the Parse site.\n\n<p>Calls options.success or options.error on completion.</p>",
            "itemtype": "method",
            "name": "requestPasswordReset",
            "params": [
                {
                    "name": "email",
                    "description": "The email address associated with the user that\n    forgot their password.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 632,
            "description": "Allow someone to define a custom User class without className\nbeing rewritten to _User. The default behavior is to rewrite\nUser to _User for legacy reasons. This allows developers to\noverride that behavior.",
            "itemtype": "method",
            "name": "allowCustomUserClass",
            "params": [
                {
                    "name": "isAllowed",
                    "description": "Whether or not to allow custom User class",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 646,
            "description": "Allows a legacy application to start using revocable sessions. If the\ncurrent session token is not revocable, a request will be made for a new,\nrevocable session.\nIt is not necessary to call this method from cloud code unless you are\nhandling user signup or login from the server side. In a cloud code call,\nthis function will not attempt to upgrade the current token.",
            "itemtype": "method",
            "name": "enableRevocableSession",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "A promise that is resolved when the process has\n  completed. If a replacement session token is requested, the promise\n  will be resolved after a new token has been fetched.",
                "type": "Parse.Promise"
            },
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 672,
            "description": "Enables the use of become or the current user in a server\nenvironment. These features are disabled by default, since they depend on\nglobal objects that are not memory-safe for most servers.",
            "itemtype": "method",
            "name": "enableUnsafeCurrentUser",
            "static": 1,
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/ParseUser.js",
            "line": 683,
            "description": "Disables the use of become or the current user in any environment.\nThese features are disabled on servers by default, since they depend on\nglobal objects that are not memory-safe for most servers.",
            "itemtype": "method",
            "name": "disableUnsafeCurrentUser",
            "static": 1,
            "class": "Parse.User"
        },
        {
            "file": "sdk/src/Push.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": "Parse.Push"
        },
        {
            "file": "sdk/src/Push.js",
            "line": 32,
            "description": "Sends a push notification.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "data",
                    "description": "-  The data of the push notification.  Valid fields\nare:\n  <ol>\n    <li>channels - An Array of channels to push to.</li>\n    <li>push_time - A Date object for when to send the push.</li>\n    <li>expiration_time -  A Date object for when to expire\n        the push.</li>\n    <li>expiration_interval - The seconds from now to expire the push.</li>\n    <li>where - A Parse.Query over Parse.Installation that is used to match\n        a set of installations to push to.</li>\n    <li>data - The data to send as part of the push</li>\n  <ol>",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "An object that has an optional success function,\nthat takes no arguments and will be called on a successful push, and\nan error function that takes a Parse.Error and will be called if the push\nfailed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the push request\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Parse.Push"
        },
        {
            "file": "sdk/src/RESTController.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/Storage.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/StorageController.browser.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/StorageController.default.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/StorageController.react-native.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/TaskQueue.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/arrayContainsObject.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/canBeSerialized.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/decode.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/encode.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/equals.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "class": ""
        },
        {
            "file": "sdk/src/escape.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/isRevocableSession.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/parseDate.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/unique.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/unsavedChildren.js",
            "line": 1,
            "description": "Copyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "flow": "",
            "class": ""
        },
        {
            "file": "sdk/src/unsavedChildren.js",
            "line": 21,
            "description": "Return an array of unsaved children, which are either Parse Objects or Files.\nIf it encounters any dirty Objects without Ids, it will throw an exception.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/Analytics.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/Cloud.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/CoreManager.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/FacebookUtils.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/InstallationController.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ObjectState.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseACL.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseConfig.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseFile.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseGeoPoint.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseInstallation.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseObject.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/src/ParseObject.js:735"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " sdk/src/ParseObject.js:832"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseOp.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseQuery.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseRelation.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseRole.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseSession.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/ParseUser.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/Push.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/RESTController.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/Storage.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/StorageController.browser.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/StorageController.default.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/StorageController.react-native.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/TaskQueue.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/arrayContainsObject.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/canBeSerialized.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/decode.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/encode.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/escape.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/isRevocableSession.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/parseDate.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/unique.js:1"
        },
        {
            "message": "unknown tag: flow",
            "line": " sdk/src/unsavedChildren.js:1"
        },
        {
            "message": "Missing item type\nIndividual Cloud Code requests currently artificially inflate the active\ninstallations of any app. Here, we force the installation ID to return\nsomething deterministic + identifiable to avoid inflation while still being\nuseful for debugging.",
            "line": " ../v8server/cloud.js:86"
        },
        {
            "message": "Missing item type\nRegisters an auth validator for an aribtrary service\n<p><strong><em>Available in Cloud Code only.</em></strong></p>\n\nA correct validator should do two things:\n1. Ensure that this auth token is valid\n2. <em><strong>Important</strong></em>\n   Ensures that this auth token is associated with this app",
            "line": " ../v8server/cloud.js:1248"
        },
        {
            "message": "Missing item type",
            "line": " ../v8server/cloud.js:1263"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/Analytics.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/Cloud.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/CoreManager.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/FacebookUtils.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/InstallationController.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ObjectState.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/Parse.js:1"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/Parse.js:50"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/Parse.js:83"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseACL.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseConfig.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseError.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseFile.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseGeoPoint.js:1"
        },
        {
            "message": "Missing item type\nThrows an exception if the given lat-long is out of bounds.",
            "line": " sdk/src/ParseGeoPoint.js:161"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseInstallation.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseObject.js:1"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseObject.js:140"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseObject.js:166"
        },
        {
            "message": "Missing item type\nReturns a local or server Id used uniquely identify this object",
            "line": " sdk/src/ParseObject.js:168"
        },
        {
            "message": "Missing item type\nReturns a local or server Id used to pull data from the Object State store\nIf single instance objects are disabled, it will use the object's unique\ncount to separate its data from other objects with the same server Id.",
            "line": " sdk/src/ParseObject.js:183"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseObject.js:377"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseObject.js:1047"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseOp.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParsePromise.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseQuery.js:1"
        },
        {
            "message": "Missing item type\nConverts a string into a regex that matches it.\nSurrounding with \\Q .. \\E does this, we just need to escape any \\E's in\nthe text separately.",
            "line": " sdk/src/ParseQuery.js:36"
        },
        {
            "message": "Missing item type\nHelper for condition queries",
            "line": " sdk/src/ParseQuery.js:155"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseQuery.js:475"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseQuery.js:836"
        },
        {
            "message": "Missing item type",
            "line": " sdk/src/ParseQuery.js:914"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseRelation.js:1"
        },
        {
            "message": "Missing item type\nMakes sure that this relation has the right parent and key.",
            "line": " sdk/src/ParseRelation.js:42"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseRole.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseSession.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/ParseUser.js:1"
        },
        {
            "message": "Missing item type\nWrap the default save behavior with functionality to save to local\nstorage if this is current user.",
            "line": " sdk/src/ParseUser.js:404"
        },
        {
            "message": "Missing item type\nWrap the default fetch behavior with functionality to save to local\nstorage if this is current user.",
            "line": " sdk/src/ParseUser.js:417"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/Push.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/RESTController.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/Storage.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/StorageController.browser.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/StorageController.default.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/StorageController.react-native.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/TaskQueue.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/arrayContainsObject.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/canBeSerialized.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/decode.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/encode.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/equals.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/escape.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/isRevocableSession.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/parseDate.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/unique.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2015-present, Parse, LLC.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the\nLICENSE file in the root directory of this source tree. An additional grant\nof patent rights can be found in the PATENTS file in the same directory.",
            "line": " sdk/src/unsavedChildren.js:1"
        },
        {
            "message": "Missing item type\nReturn an array of unsaved children, which are either Parse Objects or Files.\nIf it encounters any dirty Objects without Ids, it will throw an exception.",
            "line": " sdk/src/unsavedChildren.js:21"
        }
    ]
}